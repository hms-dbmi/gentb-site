[
{
  "model": "pipeline.program",
  "pk": 2,
  "fields": {
    "name": "Annotation",
    "description": "Takes in a .vcf file and produces a .snp file.\r\n\r\nFilters and combines the mutation data in .vcf file with data from 2 genome coordinate files (with headers) (one for coding regions and one for non coding regions) to add functional data.",
    "command_line": "perl ${bin}flatAnnotatorVAR.pl ${h37rv}.fasta ${h37rv_coding}.txt ${h37rv_noncoding}.txt ${file}.vcf 15 0.1 PASS > @{file}.var",
    "keep": true,
    "files": [
      1,
      8,
      9
    ],
    "test_files": []
  }
},
{
  "model": "pipeline.program",
  "pk": 3,
  "fields": {
    "name": "Generate Matrix",
    "description": "Takes in annotated var files and creates a matrix file from them used in predictions.",
    "command_line": "python ${bin}generate_matrix.py ${varient-names}.csv ${file}.var > @{file}.matrix.csv",
    "keep": true,
    "files": [
      2
    ],
    "test_files": []
  }
},
{
  "model": "pipeline.program",
  "pk": 4,
  "fields": {
    "name": "TB Predict (R1.2)",
    "description": "A Random Forests predictor based on the matrix file.",
    "command_line": "Rscript ${bin}TBpredict.R ${file}matrix.csv\r\nls @{file}matrix.json",
    "keep": true,
    "files": [
      3
    ],
    "test_files": []
  }
},
{
  "model": "pipeline.program",
  "pk": 5,
  "fields": {
    "name": "Pair-Ended SAM Maker",
    "description": "Use Stampy to turn two fastq files into a single sam file.",
    "command_line": "stampy -g ${h37rv} -h ${h37rv} -o @{file}.sam -f sam -M ${file_one}.fast[aq] ${file_two}.fast[aq]",
    "keep": true,
    "files": [
      1
    ],
    "test_files": []
  }
},
{
  "model": "pipeline.program",
  "pk": 6,
  "fields": {
    "name": "BAM",
    "description": "Turn a SAM file into a Binary BAM file.",
    "command_line": "samtools view -bS ${file}.sam > @{file}.bam\r\nsamtools sort @{file}.bam > @{file}.sorted.bam\r\nsamtools index @{file}.sorted.bam",
    "keep": true,
    "files": [],
    "test_files": []
  }
},
{
  "model": "pipeline.program",
  "pk": 9,
  "fields": {
    "name": "Quality Control",
    "description": "Adds Quality data to a BAM file",
    "command_line": "samtools depth -b ${dr-regions}.BED -d 50 -Q 29 ${file}.sorted.bam | ${bin}qc_report.py > @{file}.qc",
    "keep": true,
    "files": [
      4
    ],
    "test_files": []
  }
},
{
  "model": "pipeline.program",
  "pk": 10,
  "fields": {
    "name": "VCF",
    "description": "Use Platypus to create a Call Variant file from the indexed BAM file.",
    "command_line": "platypus callVariants --bamFiles=${file}.sorted.bam --refFile=${h37rv}.fasta --output=@{file}.vcf",
    "keep": true,
    "files": [
      1
    ],
    "test_files": []
  }
},
{
  "model": "pipeline.program",
  "pk": 11,
  "fields": {
    "name": "Single-Ended SAM Maker",
    "description": "Use Stampy to turn a fastq file into a sam file.",
    "command_line": "stampy -g ${h37rv} -h ${h37rv} -o @{file}.sam -f sam -M ${file}.fastq",
    "keep": true,
    "files": [
      1
    ],
    "test_files": []
  }
},
{
  "model": "pipeline.program",
  "pk": 12,
  "fields": {
    "name": "Spoligotype Lineage",
    "description": "Gets the details for the spoligotype lineage and saves to a file.",
    "command_line": "${bin}spoligotype_wrapper.sh ${file}.fastq ${spoldb} > @{file}.lineage.txt",
    "keep": true,
    "files": [
      15
    ],
    "test_files": []
  }
},
{
  "model": "pipeline.program",
  "pk": 13,
  "fields": {
    "name": "Spoligotype Lineage for Pair Ended",
    "description": "Same as previous spoligotype Lineage script but for pair ended pipelines.",
    "command_line": "${bin}spoligotype_wrapper.sh ${file_one}.fastq ${spoldb} > @{file_one}.lineage.txt",
    "keep": true,
    "files": [
      15
    ],
    "test_files": []
  }
},
{
  "model": "pipeline.program",
  "pk": 14,
  "fields": {
    "name": "Annotation 2.0",
    "description": "Takes in a .vcf file and produces a .snp file.\r\n\r\nFilters and combines the mutation data in .vcf file with data from 2 genome coordinate files (with headers) (one for coding regions and one for non coding regions) to add functional data.",
    "command_line": "perl ${bin}flatAnnotatorVAR_2.0.pl ${h37rv}.fasta ${h37rv_coding}.txt ${h37rv_noncoding}.txt ${file}.vcf 15 0.1 PASS > @{file}.var",
    "keep": true,
    "files": [
      1,
      8,
      9
    ],
    "test_files": [
      10
    ]
  }
},
{
  "model": "pipeline.program",
  "pk": 15,
  "fields": {
    "name": "Tail Test",
    "description": "Tail",
    "command_line": "tail ${file}.csv > @{file}.tail",
    "keep": true,
    "files": [
      11
    ],
    "test_files": []
  }
},
{
  "model": "pipeline.pipeline",
  "pk": 1,
  "fields": {
    "name": "VCF Pipeline",
    "description": "Process VCF Files in the rudest possible way imaginable.",
    "test_files": [
      10
    ]
  }
},
{
  "model": "pipeline.pipeline",
  "pk": 2,
  "fields": {
    "name": "Manual Pipeline",
    "description": "Creates Prediction from manually created Matrix",
    "test_files": [
      11
    ]
  }
},
{
  "model": "pipeline.pipeline",
  "pk": 3,
  "fields": {
    "name": "FastQ Single-Ended WGS Pipeline",
    "description": "Process a single FastQ file into a prediction",
    "test_files": [
      12
    ]
  }
},
{
  "model": "pipeline.pipeline",
  "pk": 4,
  "fields": {
    "name": "FastQ Pair-Ended WGS Pipeline",
    "description": "Turn two fastq files into a prediction.",
    "test_files": [
      13,
      14
    ]
  }
},
{
  "model": "pipeline.pipeline",
  "pk": 5,
  "fields": {
    "name": "FastQ Pair-Ended Targeted Pipeline",
    "description": "Similar to WGS PE pipeline but omits QC step",
    "test_files": [
      13,
      14
    ]
  }
},
{
  "model": "pipeline.pipeline",
  "pk": 6,
  "fields": {
    "name": "VCF_TO_VAR",
    "description": "Convert a vcf file to a var file",
    "test_files": [
      10
    ]
  }
},
{
  "model": "pipeline.pipeline",
  "pk": 7,
  "fields": {
    "name": "Test Cluster is Working",
    "description": "When we want to make sure the cluster and software is working on live, we can use this pipeline.",
    "test_files": []
  }
},
{
  "model": "pipeline.programfile",
  "pk": 1,
  "fields": {
    "name": "h37rv",
    "store": "pipeline/files/h37rv.fasta",
    "description": "Reference genome for TB, this is the transformed version using the bioperl command."
  }
},
{
  "model": "pipeline.programfile",
  "pk": 2,
  "fields": {
    "name": "varient-names",
    "store": "pipeline/files/variant_name_list.csv",
    "description": "List of all known mutation varients"
  }
},
{
  "model": "pipeline.programfile",
  "pk": 3,
  "fields": {
    "name": "predictor",
    "store": "pipeline/files/pza_finalpredict.RData",
    "description": "PZA Prediction data."
  }
},
{
  "model": "pipeline.programfile",
  "pk": 4,
  "fields": {
    "name": "dr-regions",
    "store": "pipeline/files/DR_regions.BED",
    "description": "Unknown File"
  }
},
{
  "model": "pipeline.programfile",
  "pk": 5,
  "fields": {
    "name": "h37rv_fai",
    "store": "pipeline/files/h37rv.fasta.fai",
    "description": "Reference genome for TB Fast Index file (fai)"
  }
},
{
  "model": "pipeline.programfile",
  "pk": 6,
  "fields": {
    "name": "h37rv_stidx",
    "store": "pipeline/files/h37rv.stidx",
    "description": "Reference genome for TB Stampy Index (stidx)"
  }
},
{
  "model": "pipeline.programfile",
  "pk": 7,
  "fields": {
    "name": "h37rv_sthash",
    "store": "pipeline/files/h37rv.sthash",
    "description": "Reference genome for TB Stampy Hash (sthash)"
  }
},
{
  "model": "pipeline.programfile",
  "pk": 8,
  "fields": {
    "name": "h37rv_noncoding",
    "store": "pipeline/files/h37rv_noncoding_summary.txt",
    "description": ""
  }
},
{
  "model": "pipeline.programfile",
  "pk": 9,
  "fields": {
    "name": "h37rv_coding",
    "store": "pipeline/files/h37rv_genome_summary.txt",
    "description": ""
  }
},
{
  "model": "pipeline.programfile",
  "pk": 10,
  "fields": {
    "name": "file",
    "store": "pipeline/files/varient_call_test.vcf",
    "description": "Test for the varient call *.vcf file."
  }
},
{
  "model": "pipeline.programfile",
  "pk": 11,
  "fields": {
    "name": "file",
    "store": "pipeline/files/matrix.csv",
    "description": "Test matrix input file as a manual input would have."
  }
},
{
  "model": "pipeline.programfile",
  "pk": 12,
  "fields": {
    "name": "file",
    "store": "pipeline/files/fastq_single_test.fastq",
    "description": "Example test file for single fastq processing."
  }
},
{
  "model": "pipeline.programfile",
  "pk": 13,
  "fields": {
    "name": "file_one",
    "store": "pipeline/files/fastq_pair_test_R1.fastq",
    "description": "Example file one."
  }
},
{
  "model": "pipeline.programfile",
  "pk": 14,
  "fields": {
    "name": "file_two",
    "store": "pipeline/files/fastq_pair_test_R2.fastq",
    "description": "Example file two."
  }
},
{
  "model": "pipeline.programfile",
  "pk": 15,
  "fields": {
    "name": "spoldb",
    "store": "pipeline/files/spoldb4_simple.txt",
    "description": "Simple Spoligotype DB4"
  }
},
{
  "model": "pipeline.programfile",
  "pk": 16,
  "fields": {
    "name": "test_fastq_1",
    "store": "pipeline/files/TDR_3_S156_L002_R1_001.fastq.gz",
    "description": "Test file (1/2) for improved megapipe."
  }
},
{
  "model": "pipeline.programfile",
  "pk": 17,
  "fields": {
    "name": "test_fastq_2",
    "store": "pipeline/files/TDR_3_S156_L002_R2_001.fastq_PAKtQ28.gz",
    "description": "Test file (2/2) for improved megapipe."
  }
},
{
  "model": "pipeline.programfile",
  "pk": 18,
  "fields": {
    "name": "tb_ref_genome",
    "store": "pipeline/files/TBRefGen.fasta",
    "description": "Reference genome for myobacterium tuberculosis in FASTA format."
  }
},
{
  "model": "pipeline.programfile",
  "pk": 19,
  "fields": {
    "name": "tb_ref_genome_index",
    "store": "pipeline/files/TBRef.mmi",
    "description": "minimap2 index file for myobacterium tuberculosis reference genome."
  }
},
{
  "model": "pipeline.programfile",
  "pk": 20,
  "fields": {
    "name": "coll-lineage",
    "store": "pipeline/files/coll.tsv",
    "description": "Reference lineage data for calculating the lineage with Luca's fast-lineage-caller-vcf.py"
  }
},
{
  "model": "pipeline.programfile",
  "pk": 21,
  "fields": {
    "name": "lineage_variants",
    "store": "pipeline/files/lineage_snp_mf.csv",
    "description": "a list of lineage variants in known resistance regions"
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 1,
  "fields": {
    "pipeline": 1,
    "program": 2,
    "order": 1
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 2,
  "fields": {
    "pipeline": 1,
    "program": 3,
    "order": 2
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 3,
  "fields": {
    "pipeline": 1,
    "program": 4,
    "order": 3
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 4,
  "fields": {
    "pipeline": 2,
    "program": 4,
    "order": 1
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 5,
  "fields": {
    "pipeline": 3,
    "program": 11,
    "order": 1
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 6,
  "fields": {
    "pipeline": 3,
    "program": 6,
    "order": 2
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 10,
  "fields": {
    "pipeline": 3,
    "program": 10,
    "order": 6
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 11,
  "fields": {
    "pipeline": 3,
    "program": 2,
    "order": 7
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 12,
  "fields": {
    "pipeline": 3,
    "program": 3,
    "order": 8
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 13,
  "fields": {
    "pipeline": 3,
    "program": 4,
    "order": 9
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 14,
  "fields": {
    "pipeline": 4,
    "program": 5,
    "order": 1
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 15,
  "fields": {
    "pipeline": 4,
    "program": 6,
    "order": 2
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 19,
  "fields": {
    "pipeline": 4,
    "program": 10,
    "order": 4
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 20,
  "fields": {
    "pipeline": 4,
    "program": 2,
    "order": 5
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 21,
  "fields": {
    "pipeline": 4,
    "program": 3,
    "order": 6
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 22,
  "fields": {
    "pipeline": 4,
    "program": 4,
    "order": 7
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 23,
  "fields": {
    "pipeline": 4,
    "program": 9,
    "order": 3
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 24,
  "fields": {
    "pipeline": 5,
    "program": 5,
    "order": 1
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 25,
  "fields": {
    "pipeline": 5,
    "program": 6,
    "order": 2
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 26,
  "fields": {
    "pipeline": 5,
    "program": 10,
    "order": 3
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 27,
  "fields": {
    "pipeline": 5,
    "program": 2,
    "order": 4
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 28,
  "fields": {
    "pipeline": 5,
    "program": 3,
    "order": 5
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 29,
  "fields": {
    "pipeline": 5,
    "program": 4,
    "order": 6
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 30,
  "fields": {
    "pipeline": 3,
    "program": 12,
    "order": 10
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 31,
  "fields": {
    "pipeline": 4,
    "program": 13,
    "order": 8
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 32,
  "fields": {
    "pipeline": 6,
    "program": 14,
    "order": 1
  }
},
{
  "model": "pipeline.pipelineprogram",
  "pk": 33,
  "fields": {
    "pipeline": 7,
    "program": 15,
    "order": 1
  }
},
{
  "model": "predict.predictpipeline",
  "pk": 1,
  "fields": {
    "pipeline": 1,
    "file_type": "vcf",
    "is_default": true
  }
},
{
  "model": "predict.predictpipeline",
  "pk": 2,
  "fields": {
    "pipeline": 2,
    "file_type": "manual",
    "is_default": true
  }
},
{
  "model": "predict.predictpipeline",
  "pk": 3,
  "fields": {
    "pipeline": 3,
    "file_type": "fastq",
    "is_default": true
  }
},
{
  "model": "predict.predictpipeline",
  "pk": 4,
  "fields": {
    "pipeline": 4,
    "file_type": "fastq-pair",
    "is_default": true
  }
},
{
  "model": "predict.predictpipeline",
  "pk": 6,
  "fields": {
    "pipeline": 5,
    "file_type": "fastq-pair",
    "is_default": false
  }
}
]
